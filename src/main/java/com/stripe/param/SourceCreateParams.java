// Generated by com.stripe.generator.entity.SdkBuilder

package com.stripe.param;

import com.google.gson.annotations.SerializedName;
import com.stripe.net.ApiParamRequest;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SourceCreateParams extends ApiParamRequest {
  @SerializedName("amount")
  Long amount;

  @SerializedName("currency")
  String currency;

  @SerializedName("customer")
  String customer;

  @SerializedName("expand")
  List<String> expand;

  @SerializedName("flow")
  Flow flow;

  @SerializedName("mandate")
  Mandate mandate;

  @SerializedName("metadata")
  Map<String, String> metadata;

  @SerializedName("original_source")
  String originalSource;

  @SerializedName("owner")
  Owner owner;

  @SerializedName("receiver")
  Receiver receiver;

  @SerializedName("redirect")
  Redirect redirect;

  @SerializedName("statement_descriptor")
  String statementDescriptor;

  @SerializedName("token")
  String token;

  @SerializedName("type")
  String type;

  @SerializedName("usage")
  Usage usage;

  private SourceCreateParams(
      Long amount,
      String currency,
      String customer,
      List<String> expand,
      Flow flow,
      Mandate mandate,
      Map<String, String> metadata,
      String originalSource,
      Owner owner,
      Receiver receiver,
      Redirect redirect,
      String statementDescriptor,
      String token,
      String type,
      Usage usage) {
    this.amount = amount;
    this.currency = currency;
    this.customer = customer;
    this.expand = expand;
    this.flow = flow;
    this.mandate = mandate;
    this.metadata = metadata;
    this.originalSource = originalSource;
    this.owner = owner;
    this.receiver = receiver;
    this.redirect = redirect;
    this.statementDescriptor = statementDescriptor;
    this.token = token;
    this.type = type;
    this.usage = usage;
  }

  public static Builder newBuilder() {
    return new com.stripe.param.SourceCreateParams.Builder();
  }

  public static class Builder {
    private Long amount;

    private String currency;

    private String customer;

    private List<String> expand;

    private Flow flow;

    private Mandate mandate;

    private Map<String, String> metadata;

    private String originalSource;

    private Owner owner;

    private Receiver receiver;

    private Redirect redirect;

    private String statementDescriptor;

    private String token;

    private String type;

    private Usage usage;

    public SourceCreateParams build() {
      return new SourceCreateParams(
          amount,
          currency,
          customer,
          expand,
          flow,
          mandate,
          metadata,
          originalSource,
          owner,
          receiver,
          redirect,
          statementDescriptor,
          token,
          type,
          usage);
    }

    public Builder addExpand(String element) {
      if (this.expand == null) {
        this.expand = new ArrayList<>();
      }
      this.expand.add(element);
      return this;
    }

    public Builder putMetadata(String key, String value) {
      if (this.metadata == null) {
        this.metadata = new HashMap<>();
      }
      this.metadata.put(key, value);
      return this;
    }

    public Builder setAmount(Long amount) {
      this.amount = amount;
      return this;
    }

    public Builder setCurrency(String currency) {
      this.currency = currency;
      return this;
    }

    public Builder setCustomer(String customer) {
      this.customer = customer;
      return this;
    }

    public Builder setFlow(Flow flow) {
      this.flow = flow;
      return this;
    }

    public Builder setMandate(Mandate.Builder mandate) {
      this.mandate = mandate.build();
      return this;
    }

    public Builder setOriginalSource(String originalSource) {
      this.originalSource = originalSource;
      return this;
    }

    public Builder setOwner(Owner.Builder owner) {
      this.owner = owner.build();
      return this;
    }

    public Builder setReceiver(Receiver.Builder receiver) {
      this.receiver = receiver.build();
      return this;
    }

    public Builder setRedirect(Redirect.Builder redirect) {
      this.redirect = redirect.build();
      return this;
    }

    public Builder setStatementDescriptor(String statementDescriptor) {
      this.statementDescriptor = statementDescriptor;
      return this;
    }

    public Builder setToken(String token) {
      this.token = token;
      return this;
    }

    public Builder setType(String type) {
      this.type = type;
      return this;
    }

    public Builder setUsage(Usage usage) {
      this.usage = usage;
      return this;
    }
  }

  public static class Mandate {
    @SerializedName("acceptance")
    Acceptance acceptance;

    @SerializedName("amount")
    Long amount;

    @SerializedName("currency")
    String currency;

    @SerializedName("interval")
    Interval interval;

    @SerializedName("notification_method")
    NotificationMethod notificationMethod;

    private Mandate(
        Acceptance acceptance,
        Long amount,
        String currency,
        Interval interval,
        NotificationMethod notificationMethod) {
      this.acceptance = acceptance;
      this.amount = amount;
      this.currency = currency;
      this.interval = interval;
      this.notificationMethod = notificationMethod;
    }

    public static Builder newBuilder() {
      return new com.stripe.param.SourceCreateParams.Mandate.Builder();
    }

    public static class Builder {
      private Acceptance acceptance;

      private Long amount;

      private String currency;

      private Interval interval;

      private NotificationMethod notificationMethod;

      public Mandate build() {
        return new Mandate(acceptance, amount, currency, interval, notificationMethod);
      }

      public Builder setAcceptance(Acceptance.Builder acceptance) {
        this.acceptance = acceptance.build();
        return this;
      }

      public Builder setAmount(Long amount) {
        this.amount = amount;
        return this;
      }

      public Builder setCurrency(String currency) {
        this.currency = currency;
        return this;
      }

      public Builder setInterval(Interval interval) {
        this.interval = interval;
        return this;
      }

      public Builder setNotificationMethod(NotificationMethod notificationMethod) {
        this.notificationMethod = notificationMethod;
        return this;
      }
    }

    public static class Acceptance {
      @SerializedName("date")
      Long date;

      @SerializedName("ip")
      String ip;

      @SerializedName("offline")
      Offline offline;

      @SerializedName("online")
      Online online;

      @SerializedName("status")
      Status status;

      @SerializedName("type")
      Type type;

      @SerializedName("user_agent")
      String userAgent;

      private Acceptance(
          Long date,
          String ip,
          Offline offline,
          Online online,
          Status status,
          Type type,
          String userAgent) {
        this.date = date;
        this.ip = ip;
        this.offline = offline;
        this.online = online;
        this.status = status;
        this.type = type;
        this.userAgent = userAgent;
      }

      public static Builder newBuilder() {
        return new com.stripe.param.SourceCreateParams.Mandate.Acceptance.Builder();
      }

      public static class Builder {
        private Long date;

        private String ip;

        private Offline offline;

        private Online online;

        private Status status;

        private Type type;

        private String userAgent;

        public Acceptance build() {
          return new Acceptance(date, ip, offline, online, status, type, userAgent);
        }

        public Builder setDate(Long date) {
          this.date = date;
          return this;
        }

        public Builder setIp(String ip) {
          this.ip = ip;
          return this;
        }

        public Builder setOffline(Offline.Builder offline) {
          this.offline = offline.build();
          return this;
        }

        public Builder setOnline(Online.Builder online) {
          this.online = online.build();
          return this;
        }

        public Builder setStatus(Status status) {
          this.status = status;
          return this;
        }

        public Builder setType(Type type) {
          this.type = type;
          return this;
        }

        public Builder setUserAgent(String userAgent) {
          this.userAgent = userAgent;
          return this;
        }
      }

      public static class Offline {
        @SerializedName("contact_email")
        String contactEmail;

        private Offline(String contactEmail) {
          this.contactEmail = contactEmail;
        }

        public static Builder newBuilder() {
          return new com.stripe.param.SourceCreateParams.Mandate.Acceptance.Offline.Builder();
        }

        public static class Builder {
          private String contactEmail;

          public Offline build() {
            return new Offline(contactEmail);
          }

          public Builder setContactEmail(String contactEmail) {
            this.contactEmail = contactEmail;
            return this;
          }
        }
      }

      public static class Online {
        @SerializedName("date")
        Long date;

        @SerializedName("ip")
        String ip;

        @SerializedName("user_agent")
        String userAgent;

        private Online(Long date, String ip, String userAgent) {
          this.date = date;
          this.ip = ip;
          this.userAgent = userAgent;
        }

        public static Builder newBuilder() {
          return new com.stripe.param.SourceCreateParams.Mandate.Acceptance.Online.Builder();
        }

        public static class Builder {
          private Long date;

          private String ip;

          private String userAgent;

          public Online build() {
            return new Online(date, ip, userAgent);
          }

          public Builder setDate(Long date) {
            this.date = date;
            return this;
          }

          public Builder setIp(String ip) {
            this.ip = ip;
            return this;
          }

          public Builder setUserAgent(String userAgent) {
            this.userAgent = userAgent;
            return this;
          }
        }
      }

      public enum Status {
        @SerializedName("accepted")
        ACCEPTED("accepted"),

        @SerializedName("pending")
        PENDING("pending"),

        @SerializedName("refused")
        REFUSED("refused"),

        @SerializedName("revoked")
        REVOKED("revoked");

        private final String value;

        Status(String value) {
          this.value = value;
        }
      }

      public enum Type {
        @SerializedName("offline")
        OFFLINE("offline"),

        @SerializedName("online")
        ONLINE("online");

        private final String value;

        Type(String value) {
          this.value = value;
        }
      }
    }

    public enum Interval {
      @SerializedName("one_time")
      ONE_TIME("one_time"),

      @SerializedName("scheduled")
      SCHEDULED("scheduled"),

      @SerializedName("variable")
      VARIABLE("variable");

      private final String value;

      Interval(String value) {
        this.value = value;
      }
    }

    public enum NotificationMethod {
      @SerializedName("deprecated_none")
      DEPRECATED_NONE("deprecated_none"),

      @SerializedName("email")
      EMAIL("email"),

      @SerializedName("manual")
      MANUAL("manual"),

      @SerializedName("none")
      NONE("none"),

      @SerializedName("stripe_email")
      STRIPE_EMAIL("stripe_email");

      private final String value;

      NotificationMethod(String value) {
        this.value = value;
      }
    }
  }

  public static class Owner {
    @SerializedName("address")
    Address address;

    @SerializedName("email")
    String email;

    @SerializedName("name")
    String name;

    @SerializedName("phone")
    String phone;

    private Owner(Address address, String email, String name, String phone) {
      this.address = address;
      this.email = email;
      this.name = name;
      this.phone = phone;
    }

    public static Builder newBuilder() {
      return new com.stripe.param.SourceCreateParams.Owner.Builder();
    }

    public static class Builder {
      private Address address;

      private String email;

      private String name;

      private String phone;

      public Owner build() {
        return new Owner(address, email, name, phone);
      }

      public Builder setAddress(Address.Builder address) {
        this.address = address.build();
        return this;
      }

      public Builder setEmail(String email) {
        this.email = email;
        return this;
      }

      public Builder setName(String name) {
        this.name = name;
        return this;
      }

      public Builder setPhone(String phone) {
        this.phone = phone;
        return this;
      }
    }

    public static class Address {
      @SerializedName("city")
      String city;

      @SerializedName("country")
      String country;

      @SerializedName("line1")
      String line1;

      @SerializedName("line2")
      String line2;

      @SerializedName("postal_code")
      String postalCode;

      @SerializedName("state")
      String state;

      private Address(
          String city,
          String country,
          String line1,
          String line2,
          String postalCode,
          String state) {
        this.city = city;
        this.country = country;
        this.line1 = line1;
        this.line2 = line2;
        this.postalCode = postalCode;
        this.state = state;
      }

      public static Builder newBuilder() {
        return new com.stripe.param.SourceCreateParams.Owner.Address.Builder();
      }

      public static class Builder {
        private String city;

        private String country;

        private String line1;

        private String line2;

        private String postalCode;

        private String state;

        public Address build() {
          return new Address(city, country, line1, line2, postalCode, state);
        }

        public Builder setCity(String city) {
          this.city = city;
          return this;
        }

        public Builder setCountry(String country) {
          this.country = country;
          return this;
        }

        public Builder setLine1(String line1) {
          this.line1 = line1;
          return this;
        }

        public Builder setLine2(String line2) {
          this.line2 = line2;
          return this;
        }

        public Builder setPostalCode(String postalCode) {
          this.postalCode = postalCode;
          return this;
        }

        public Builder setState(String state) {
          this.state = state;
          return this;
        }
      }
    }
  }

  public static class Receiver {
    @SerializedName("refund_attributes_method")
    RefundAttributesMethod refundAttributesMethod;

    private Receiver(RefundAttributesMethod refundAttributesMethod) {
      this.refundAttributesMethod = refundAttributesMethod;
    }

    public static Builder newBuilder() {
      return new com.stripe.param.SourceCreateParams.Receiver.Builder();
    }

    public static class Builder {
      private RefundAttributesMethod refundAttributesMethod;

      public Receiver build() {
        return new Receiver(refundAttributesMethod);
      }

      public Builder setRefundAttributesMethod(RefundAttributesMethod refundAttributesMethod) {
        this.refundAttributesMethod = refundAttributesMethod;
        return this;
      }
    }

    public enum RefundAttributesMethod {
      @SerializedName("email")
      EMAIL("email"),

      @SerializedName("manual")
      MANUAL("manual"),

      @SerializedName("none")
      NONE("none");

      private final String value;

      RefundAttributesMethod(String value) {
        this.value = value;
      }
    }
  }

  public static class Redirect {
    @SerializedName("return_url")
    String returnUrl;

    private Redirect(String returnUrl) {
      this.returnUrl = returnUrl;
    }

    public static Builder newBuilder() {
      return new com.stripe.param.SourceCreateParams.Redirect.Builder();
    }

    public static class Builder {
      private String returnUrl;

      public Redirect build() {
        return new Redirect(returnUrl);
      }

      public Builder setReturnUrl(String returnUrl) {
        this.returnUrl = returnUrl;
        return this;
      }
    }
  }

  public enum Flow {
    @SerializedName("code_verification")
    CODE_VERIFICATION("code_verification"),

    @SerializedName("none")
    NONE("none"),

    @SerializedName("receiver")
    RECEIVER("receiver"),

    @SerializedName("redirect")
    REDIRECT("redirect");

    private final String value;

    Flow(String value) {
      this.value = value;
    }
  }

  public enum Usage {
    @SerializedName("reusable")
    REUSABLE("reusable"),

    @SerializedName("single_use")
    SINGLE_USE("single_use");

    private final String value;

    Usage(String value) {
      this.value = value;
    }
  }
}
