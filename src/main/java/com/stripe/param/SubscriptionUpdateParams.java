// Generated by com.stripe.generator.entity.SdkBuilder

package com.stripe.param;

import com.google.gson.annotations.SerializedName;
import com.stripe.net.ApiParamRequest;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubscriptionUpdateParams extends ApiParamRequest {
  @SerializedName("application_fee_percent")
  BigDecimal applicationFeePercent;

  @SerializedName("billing")
  Billing billing;

  @SerializedName("billing_cycle_anchor")
  String billingCycleAnchor;

  @SerializedName("billing_thresholds")
  BillingThresholds billingThresholds;

  @SerializedName("cancel_at_period_end")
  Boolean cancelAtPeriodEnd;

  @SerializedName("coupon")
  String coupon;

  @SerializedName("days_until_due")
  Long daysUntilDue;

  @SerializedName("default_source")
  String defaultSource;

  @SerializedName("expand")
  List<String> expand;

  @SerializedName("items")
  List<Items> items;

  @SerializedName("metadata")
  Map<String, String> metadata;

  @SerializedName("prorate")
  Boolean prorate;

  @SerializedName("proration_date")
  Long prorationDate;

  @SerializedName("tax_percent")
  BigDecimal taxPercent;

  @SerializedName("trial_end")
  String trialEnd;

  @SerializedName("trial_from_plan")
  Boolean trialFromPlan;

  private SubscriptionUpdateParams(
      BigDecimal applicationFeePercent,
      Billing billing,
      String billingCycleAnchor,
      BillingThresholds billingThresholds,
      Boolean cancelAtPeriodEnd,
      String coupon,
      Long daysUntilDue,
      String defaultSource,
      List<String> expand,
      List<Items> items,
      Map<String, String> metadata,
      Boolean prorate,
      Long prorationDate,
      BigDecimal taxPercent,
      String trialEnd,
      Boolean trialFromPlan) {
    this.applicationFeePercent = applicationFeePercent;
    this.billing = billing;
    this.billingCycleAnchor = billingCycleAnchor;
    this.billingThresholds = billingThresholds;
    this.cancelAtPeriodEnd = cancelAtPeriodEnd;
    this.coupon = coupon;
    this.daysUntilDue = daysUntilDue;
    this.defaultSource = defaultSource;
    this.expand = expand;
    this.items = items;
    this.metadata = metadata;
    this.prorate = prorate;
    this.prorationDate = prorationDate;
    this.taxPercent = taxPercent;
    this.trialEnd = trialEnd;
    this.trialFromPlan = trialFromPlan;
  }

  public static Builder newBuilder() {
    return new com.stripe.param.SubscriptionUpdateParams.Builder();
  }

  public static class Builder {
    private BigDecimal applicationFeePercent;

    private Billing billing;

    private String billingCycleAnchor;

    private BillingThresholds billingThresholds;

    private Boolean cancelAtPeriodEnd;

    private String coupon;

    private Long daysUntilDue;

    private String defaultSource;

    private List<String> expand;

    private List<Items> items;

    private Map<String, String> metadata;

    private Boolean prorate;

    private Long prorationDate;

    private BigDecimal taxPercent;

    private String trialEnd;

    private Boolean trialFromPlan;

    public SubscriptionUpdateParams build() {
      return new SubscriptionUpdateParams(
          applicationFeePercent,
          billing,
          billingCycleAnchor,
          billingThresholds,
          cancelAtPeriodEnd,
          coupon,
          daysUntilDue,
          defaultSource,
          expand,
          items,
          metadata,
          prorate,
          prorationDate,
          taxPercent,
          trialEnd,
          trialFromPlan);
    }

    public Builder addExpand(String element) {
      if (this.expand == null) {
        this.expand = new ArrayList<>();
      }
      this.expand.add(element);
      return this;
    }

    public Builder addItems(Items.Builder element) {
      if (this.items == null) {
        this.items = new ArrayList<>();
      }
      this.items.add(element.build());
      return this;
    }

    public Builder putMetadata(String key, String value) {
      if (this.metadata == null) {
        this.metadata = new HashMap<>();
      }
      this.metadata.put(key, value);
      return this;
    }

    public Builder setApplicationFeePercent(BigDecimal applicationFeePercent) {
      this.applicationFeePercent = applicationFeePercent;
      return this;
    }

    public Builder setBilling(Billing billing) {
      this.billing = billing;
      return this;
    }

    public Builder setBillingCycleAnchor(String billingCycleAnchor) {
      this.billingCycleAnchor = billingCycleAnchor;
      return this;
    }

    public Builder setBillingThresholds(BillingThresholds.Builder billingThresholds) {
      this.billingThresholds = billingThresholds.build();
      return this;
    }

    public Builder setCancelAtPeriodEnd(Boolean cancelAtPeriodEnd) {
      this.cancelAtPeriodEnd = cancelAtPeriodEnd;
      return this;
    }

    public Builder setCoupon(String coupon) {
      this.coupon = coupon;
      return this;
    }

    public Builder setDaysUntilDue(Long daysUntilDue) {
      this.daysUntilDue = daysUntilDue;
      return this;
    }

    public Builder setDefaultSource(String defaultSource) {
      this.defaultSource = defaultSource;
      return this;
    }

    public Builder setProrate(Boolean prorate) {
      this.prorate = prorate;
      return this;
    }

    public Builder setProrationDate(Long prorationDate) {
      this.prorationDate = prorationDate;
      return this;
    }

    public Builder setTaxPercent(BigDecimal taxPercent) {
      this.taxPercent = taxPercent;
      return this;
    }

    public Builder setTrialEnd(String trialEnd) {
      this.trialEnd = trialEnd;
      return this;
    }

    public Builder setTrialFromPlan(Boolean trialFromPlan) {
      this.trialFromPlan = trialFromPlan;
      return this;
    }
  }

  public static class BillingThresholds {
    @SerializedName("amount_gte")
    Long amountGte;

    @SerializedName("reset_billing_cycle_anchor")
    Boolean resetBillingCycleAnchor;

    private BillingThresholds(Long amountGte, Boolean resetBillingCycleAnchor) {
      this.amountGte = amountGte;
      this.resetBillingCycleAnchor = resetBillingCycleAnchor;
    }

    public static Builder newBuilder() {
      return new com.stripe.param.SubscriptionUpdateParams.BillingThresholds.Builder();
    }

    public static class Builder {
      private Long amountGte;

      private Boolean resetBillingCycleAnchor;

      public BillingThresholds build() {
        return new BillingThresholds(amountGte, resetBillingCycleAnchor);
      }

      public Builder setAmountGte(Long amountGte) {
        this.amountGte = amountGte;
        return this;
      }

      public Builder setResetBillingCycleAnchor(Boolean resetBillingCycleAnchor) {
        this.resetBillingCycleAnchor = resetBillingCycleAnchor;
        return this;
      }
    }
  }

  public static class Items {
    @SerializedName("billing_thresholds")
    BillingThresholds billingThresholds;

    @SerializedName("clear_usage")
    Boolean clearUsage;

    @SerializedName("deleted")
    Boolean deleted;

    @SerializedName("id")
    String id;

    @SerializedName("metadata")
    Map<String, String> metadata;

    @SerializedName("plan")
    String plan;

    @SerializedName("quantity")
    Long quantity;

    private Items(
        BillingThresholds billingThresholds,
        Boolean clearUsage,
        Boolean deleted,
        String id,
        Map<String, String> metadata,
        String plan,
        Long quantity) {
      this.billingThresholds = billingThresholds;
      this.clearUsage = clearUsage;
      this.deleted = deleted;
      this.id = id;
      this.metadata = metadata;
      this.plan = plan;
      this.quantity = quantity;
    }

    public static Builder newBuilder() {
      return new com.stripe.param.SubscriptionUpdateParams.Items.Builder();
    }

    public static class Builder {
      private BillingThresholds billingThresholds;

      private Boolean clearUsage;

      private Boolean deleted;

      private String id;

      private Map<String, String> metadata;

      private String plan;

      private Long quantity;

      public Items build() {
        return new Items(billingThresholds, clearUsage, deleted, id, metadata, plan, quantity);
      }

      public Builder putMetadata(String key, String value) {
        if (this.metadata == null) {
          this.metadata = new HashMap<>();
        }
        this.metadata.put(key, value);
        return this;
      }

      public Builder setBillingThresholds(BillingThresholds.Builder billingThresholds) {
        this.billingThresholds = billingThresholds.build();
        return this;
      }

      public Builder setClearUsage(Boolean clearUsage) {
        this.clearUsage = clearUsage;
        return this;
      }

      public Builder setDeleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
      }

      public Builder setId(String id) {
        this.id = id;
        return this;
      }

      public Builder setPlan(String plan) {
        this.plan = plan;
        return this;
      }

      public Builder setQuantity(Long quantity) {
        this.quantity = quantity;
        return this;
      }
    }

    public static class BillingThresholds {
      @SerializedName("usage_gte")
      Long usageGte;

      private BillingThresholds(Long usageGte) {
        this.usageGte = usageGte;
      }

      public static Builder newBuilder() {
        return new com.stripe.param.SubscriptionUpdateParams.Items.BillingThresholds.Builder();
      }

      public static class Builder {
        private Long usageGte;

        public BillingThresholds build() {
          return new BillingThresholds(usageGte);
        }

        public Builder setUsageGte(Long usageGte) {
          this.usageGte = usageGte;
          return this;
        }
      }
    }
  }

  public enum Billing {
    @SerializedName("charge_automatically")
    CHARGE_AUTOMATICALLY("charge_automatically"),

    @SerializedName("send_invoice")
    SEND_INVOICE("send_invoice");

    private final String value;

    Billing(String value) {
      this.value = value;
    }
  }
}
