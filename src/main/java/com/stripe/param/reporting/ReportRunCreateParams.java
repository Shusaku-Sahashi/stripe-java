// Generated by com.stripe.generator.entity.SdkBuilder

package com.stripe.param.reporting;

import com.google.gson.annotations.SerializedName;
import com.stripe.net.ApiParamRequest;
import java.util.ArrayList;
import java.util.List;

public class ReportRunCreateParams extends ApiParamRequest {
  @SerializedName("expand")
  List<String> expand;

  @SerializedName("parameters")
  Parameters parameters;

  @SerializedName("report_type")
  String reportType;

  private ReportRunCreateParams(List<String> expand, Parameters parameters, String reportType) {
    this.expand = expand;
    this.parameters = parameters;
    this.reportType = reportType;
  }

  public static Builder newBuilder() {
    return new com.stripe.param.reporting.ReportRunCreateParams.Builder();
  }

  public static class Builder {
    private List<String> expand;

    private Parameters parameters;

    private String reportType;

    public ReportRunCreateParams build() {
      return new ReportRunCreateParams(expand, parameters, reportType);
    }

    public Builder addExpand(String element) {
      if (this.expand == null) {
        this.expand = new ArrayList<>();
      }
      this.expand.add(element);
      return this;
    }

    public Builder setParameters(Parameters.Builder parameters) {
      this.parameters = parameters.build();
      return this;
    }

    public Builder setReportType(String reportType) {
      this.reportType = reportType;
      return this;
    }
  }

  public static class Parameters {
    @SerializedName("connected_account")
    String connectedAccount;

    @SerializedName("currency")
    String currency;

    @SerializedName("interval_end")
    Long intervalEnd;

    @SerializedName("interval_start")
    Long intervalStart;

    @SerializedName("payout")
    String payout;

    @SerializedName("reporting_category")
    ReportingCategory reportingCategory;

    private Parameters(
        String connectedAccount,
        String currency,
        Long intervalEnd,
        Long intervalStart,
        String payout,
        ReportingCategory reportingCategory) {
      this.connectedAccount = connectedAccount;
      this.currency = currency;
      this.intervalEnd = intervalEnd;
      this.intervalStart = intervalStart;
      this.payout = payout;
      this.reportingCategory = reportingCategory;
    }

    public static Builder newBuilder() {
      return new com.stripe.param.reporting.ReportRunCreateParams.Parameters.Builder();
    }

    public static class Builder {
      private String connectedAccount;

      private String currency;

      private Long intervalEnd;

      private Long intervalStart;

      private String payout;

      private ReportingCategory reportingCategory;

      public Parameters build() {
        return new Parameters(
            connectedAccount, currency, intervalEnd, intervalStart, payout, reportingCategory);
      }

      public Builder setConnectedAccount(String connectedAccount) {
        this.connectedAccount = connectedAccount;
        return this;
      }

      public Builder setCurrency(String currency) {
        this.currency = currency;
        return this;
      }

      public Builder setIntervalEnd(Long intervalEnd) {
        this.intervalEnd = intervalEnd;
        return this;
      }

      public Builder setIntervalStart(Long intervalStart) {
        this.intervalStart = intervalStart;
        return this;
      }

      public Builder setPayout(String payout) {
        this.payout = payout;
        return this;
      }

      public Builder setReportingCategory(ReportingCategory reportingCategory) {
        this.reportingCategory = reportingCategory;
        return this;
      }
    }

    public enum ReportingCategory {
      @SerializedName("advance")
      ADVANCE("advance"),

      @SerializedName("advance_funding")
      ADVANCE_FUNDING("advance_funding"),

      @SerializedName("charge")
      CHARGE("charge"),

      @SerializedName("charge_failure")
      CHARGE_FAILURE("charge_failure"),

      @SerializedName("connect_collection_transfer")
      CONNECT_COLLECTION_TRANSFER("connect_collection_transfer"),

      @SerializedName("connect_reserved_funds")
      CONNECT_RESERVED_FUNDS("connect_reserved_funds"),

      @SerializedName("dispute")
      DISPUTE("dispute"),

      @SerializedName("dispute_reversal")
      DISPUTE_REVERSAL("dispute_reversal"),

      @SerializedName("fee")
      FEE("fee"),

      @SerializedName("financing_paydown")
      FINANCING_PAYDOWN("financing_paydown"),

      @SerializedName("financing_payout")
      FINANCING_PAYOUT("financing_payout"),

      @SerializedName("issuing_authorization_hold")
      ISSUING_AUTHORIZATION_HOLD("issuing_authorization_hold"),

      @SerializedName("issuing_authorization_release")
      ISSUING_AUTHORIZATION_RELEASE("issuing_authorization_release"),

      @SerializedName("issuing_transaction")
      ISSUING_TRANSACTION("issuing_transaction"),

      @SerializedName("network_cost")
      NETWORK_COST("network_cost"),

      @SerializedName("other_adjustment")
      OTHER_ADJUSTMENT("other_adjustment"),

      @SerializedName("partial_capture_reversal")
      PARTIAL_CAPTURE_REVERSAL("partial_capture_reversal"),

      @SerializedName("payout")
      PAYOUT("payout"),

      @SerializedName("payout_reversal")
      PAYOUT_REVERSAL("payout_reversal"),

      @SerializedName("platform_earning")
      PLATFORM_EARNING("platform_earning"),

      @SerializedName("platform_earning_refund")
      PLATFORM_EARNING_REFUND("platform_earning_refund"),

      @SerializedName("refund")
      REFUND("refund"),

      @SerializedName("refund_failure")
      REFUND_FAILURE("refund_failure"),

      @SerializedName("risk_reserved_funds")
      RISK_RESERVED_FUNDS("risk_reserved_funds"),

      @SerializedName("tax")
      TAX("tax"),

      @SerializedName("topup")
      TOPUP("topup"),

      @SerializedName("topup_reversal")
      TOPUP_REVERSAL("topup_reversal"),

      @SerializedName("transfer")
      TRANSFER("transfer"),

      @SerializedName("transfer_reversal")
      TRANSFER_REVERSAL("transfer_reversal");

      private final String value;

      ReportingCategory(String value) {
        this.value = value;
      }
    }
  }
}
